/** Declaration file generated by dts-gen */

export = graphql_geojson;

declare const graphql_geojson: {
    CRSPropertiesUnion: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getTypes: any;
        inspect: any;
        name: string;
        resolveType: any;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    CRSTypeEnum: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getValue: any;
        getValues: any;
        inspect: any;
        name: string;
        parseLiteral: any;
        parseValue: any;
        serialize: any;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    CoordinateReferenceSystemObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    CoordinatesScalar: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        inspect: any;
        name: string;
        parseLiteral: any;
        parseValue: any;
        serialize: any;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    FeatureCollectionObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    FeatureObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    GeoJSONInterface: {
        astNode: any;
        description: any;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        inspect: any;
        name: string;
        resolveType: any;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    GeometryCollectionObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    GeometryInterface: {
        astNode: any;
        description: any;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        inspect: any;
        name: string;
        resolveType: any;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    JsonScalar: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        inspect: any;
        name: string;
        parseLiteral: any;
        parseValue: any;
        serialize: any;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    LineStringObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    LinkedCRSPropertiesObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    MultiLineStringObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    MultiPointObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    MultiPolygonObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    NamedCRSPropertiesObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    PointObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    PolygonObject: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getFields: any;
        getInterfaces: any;
        inspect: any;
        isTypeOf: any;
        name: string;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
    TypeEnum: {
        astNode: any;
        description: string;
        extensionASTNodes: any;
        extensions: any;
        getValue: any;
        getValues: any;
        inspect: any;
        name: string;
        parseLiteral: any;
        parseValue: any;
        serialize: any;
        toConfig: any;
        toJSON: any;
        toString: any;
    };
};

